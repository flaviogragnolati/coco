generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    isActive      Boolean   @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    accounts      Account[]
    sessions      Session[]
    roles         Role[]         @relation("userRoles")
    addresses     Address[]      @relation("userAddresses")
    carts         Cart[]
    notifications Notification[]
    events        Event[]
}

model Role {
    id          Int      @id @default(autoincrement())
    type        RoleType
    name        String   @unique
    description String?
    rules       Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userId String?
    user   User?   @relation("userRoles", fields: [userId], references: [id])
}

enum RoleType {
    ADMIN
    USER
    ALLY
    SUPPLIER
}

model Address {
    id          Int         @id @default(autoincrement())
    type        AddressType
    fullAddress String
    street      String
    number      String
    city        String
    state       String
    postalCode  String
    country     String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    userId     String?
    user       User?      @relation("userAddresses", fields: [userId], references: [id])
    supplierId Int?
    supplier   Supplier?  @relation("supplierAddresses", fields: [supplierId], references: [id])
    shipments  Shipment[]
}

enum AddressType {
    HOME
    WORK
    SHIPPING
    BILLING
    FRACTIONING
}

model Supplier {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    image       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    addresses Address[] @relation("supplierAddresses")
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    image       String?
    price       Float
    moq         Float
    unit        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    cartId Int?
    cart   Cart? @relation(fields: [cartId], references: [id])
}

// addressId ??? como elegimos la dirección de envío? o delivery?
model Cart {
    id        Int        @id @default(autoincrement())
    status    CartStatus
    total     Float
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt

    userId   String
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    orderId  Int?
    order    Order?    @relation(fields: [orderId], references: [id])
    products Product[]
    payments Payment[]
}

enum CartStatus {
    ACTIVE
    CHECKED_OUT
    ABANDONED
}

// denormalizar supplier?
// asignar aliado?
model Order {
    id        Int         @id @default(autoincrement())
    total     Float
    status    OrderStatus
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    carts      Cart[]
    shipmentId Int?
    shipment   Shipment? @relation(fields: [shipmentId], references: [id])
}

enum OrderStatus {
    DRAFT
    PAYMENT_PENDING
    COMPLETED
    CANCELLED_BY_USER
    CANCELLED_BY_ADMIN
    CANCELLED_BY_TIMEOUT
    PAYMENT_FAILED
    REFUNDED
}

model Shipment {
    id         Int            @id @default(autoincrement())
    trackingId String
    carrier    String
    status     ShipmentStatus
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt

    orders    Order[]
    addressId Int
    address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

enum ShipmentStatus {
    PENDING
    SHIPPED
    DELIVERED
    RETURNED
}

model Payment {
    id        Int           @id @default(autoincrement())
    amount    Float
    status    PaymentStatus
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    cartId Int?
    cart   Cart? @relation(fields: [cartId], references: [id])
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

model Event {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    date        DateTime
    location    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
    id          Int                @id @default(autoincrement())
    message     String
    type        NotificationType
    status      NotificationStatus
    scheduledAt DateTime?
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    channelId Int
    channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

enum NotificationType {
    INFO
    WARNING
    ERROR
    SUCCESS
}

enum NotificationStatus {
    PENDING
    SENT
    READ
    FAILED
    RETRY
}

model Channel {
    id          Int         @id @default(autoincrement())
    type        ChannelType
    name        String
    description String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    notifications Notification[]
}

enum ChannelType {
    EMAIL
    SMS
    PUSH
    IN_APP
    WHATSAPP
}
